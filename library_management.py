# Content Library Management: Managing a library of streaming content, including movies and TV shows
from numpy import append
import random
from utility import limpar_tela, normalizar_texto
import time
from abc import ABC, abstractmethod
import datetime
from ads_management import realizar_exibicao_anuncio, redefinir_limite_diario

class ConjuntoMidias:
    # Referente a varias midias
    def __init__(self):
        self.midias= []
    
    def buscar_por_titulo(self, titulo):
        resultados = []
        titulo = normalizar_texto(titulo)
        for midia in self.midias:
            if titulo in normalizar_texto(midia.titulo):
                resultados.append(midia)
        return resultados if resultados else None

    def buscar_por_genero(self, genero):
        resultados = []
        genero = normalizar_texto(genero)
        for midia in self.midias:
            if genero in normalizar_texto(midia.genero):
                resultados.append(midia)
        return resultados if resultados else None

    def navegar(self, quantidade=5):
        print("\nüé¨ Conte√∫dos sugeridos para voc√™:\n")
        amostra = random.sample(self.midias, min(quantidade, len(self.midias)))
        for midia in amostra:
            midia.exibir_informacoes()
            print()

class Midia(ABC):
    # Referente a uma midia especifica
    def __init__(self, titulo, genero, classificacao, tempo_duracao):
        self.titulo = titulo
        self.genero = genero
        self.classificacao = classificacao
        self.tempo_duracao = tempo_duracao
        self.assistido = False
        self.ultima_exibicao = None
        

    @abstractmethod
    def exibir_informacoes(self):
        pass

    def configurar_visualizacao(self):
        if self.assistido:
            status = (
                "‚úîÔ∏è Assistido "
                f"(√öltima exibi√ß√£o: {self.ultima_exibicao.strftime('%d/%m/%Y %H:%M')})"
            )
        else:
            status = "‚ùå N√£o Assistido"
        return status

    def assistir(self, usuario):
        usuario.conteudos_vistos += 1
        if usuario.plano.limite_diario < usuario.conteudos_vistos:
            print("Limite di√°rio de visualiza√ß√µes atingido. Assista um an√∫ncio para redefinir esse limite.")
            print("Deseja assistir o anuncio? (s/n)")
            resposta = input().strip().lower()
            if resposta == "s":
                time.sleep(2)
                limpar_tela()
                redefinir_limite_diario(usuario)
                print("Limite redefinido com sucesso!")
                time.sleep(2)
                limpar_tela()
            else:
                return 

        while True:
            limpar_tela()
            titulo = self.titulo.strip()
            titulo_centralizado = titulo.center(24)

            # marca√ß√£o de estado
            self.assistido = True
            self.ultima_exibicao = datetime.datetime.now()
            usuario.ultimo_conteudo_assistido = self.titulo

            # avalia√ß√£o de banda antes de come√ßar
            usuario.otimizacao_banda_larga.ajustar_qualidade(usuario)
            usuario.otimizacao_banda_larga.exibir_configuracoes_qualidade()
        
            print()

            print("‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñÑ‚ñÄ")
            print("‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ")
            print("‚ñà‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë‚ñà‚ñÄ‚ñà Assistindo:")
            print(f"‚ñà‚ñë‚ñí‚ñë‚ñí‚ñë‚ñí‚ñà‚ñÄ‚ñà {titulo_centralizado} ")
            print("‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            print()
            # A cada alguns segundos, tentar exibir um anuncio
            if usuario.plano.nome != "Premium":
                anuncio = realizar_exibicao_anuncio(usuario)
                if anuncio is True:
                    print("Pressione Enter para continuar.")
                    continue
            else:
                input("Pressione Enter para parar de assistir.")
                limpar_tela()

            print("Conte√∫do pausado. O que deseja fazer?")
            escolha = input(
                "1. Continuar assistindo\n"
                "2. Mudar a qualidade de reprodu√ß√£o\n"
                "3. Parar de assistir\n"
                "Escolha uma op√ß√£o: "
            ).strip()

            if escolha == "1":
                print("Retomando...")
                time.sleep(1)
                continue
            elif escolha == "2":
                usuario.otimizacao_banda_larga.mudar_qualidade(usuario)  
                
            elif escolha == "3":
                print(f"\nVoc√™ parou de assistir {self.titulo}.")
                print("Obrigado por assistir!")
                time.sleep(2)
                limpar_tela()
                break
            else:
                print("Op√ß√£o inv√°lida.")


    def assistir_convidado(self):
        limpar_tela()
        titulo = self.titulo.strip()
        titulo_centralizado = titulo.center(24)
        self.assistido = True
        self.ultima_exibicao = datetime.datetime.now()

        print("‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñÑ‚ñÄ")
        print("‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ")
        print("‚ñà‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë‚ñà‚ñÄ‚ñà Assistindo:")
        print(f"‚ñà‚ñë‚ñí‚ñë‚ñí‚ñë‚ñí‚ñà‚ñÄ‚ñà {titulo_centralizado} ")
        print("‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print()
        print("Pressione Enter para parar de assistir.")
        input()
        print(f"\nVoc√™ parou de assistir {self.titulo}.")
        print("Obrigado por assistir!")
        time.sleep(2)
        limpar_tela()


class Filme(Midia):
    def exibir_informacoes(self):
        print("‚ïî" + "‚ïê" * 50 + "‚ïó")
        print(f"‚ïë üé¨  {self.titulo:<42}‚ïë") 
        print("‚ï†" + "‚ïê" * 50 + "‚ï£")
        print(f"‚ïë Tipo: Filme{'':<42}‚ïë")
        print(f"‚ïë G√™nero: {self.genero:<40}‚ïë")
        print(f"‚ïë Classifica√ß√£o: {self.classificacao:<32}‚ïë")
        print(f"‚ïë Dura√ß√£o: {self.tempo_duracao} min{'':<31}‚ïë")
        print(f"‚ïë Status: {self.configurar_visualizacao()} {'':<31}‚ïë")
        print("‚ïö" + "‚ïê" * 50 + "‚ïù")

class Serie(Midia):
    def __init__(self, titulo, genero, classificacao, tempo_duracao, episodios, temporadas):
        super().__init__(titulo, genero, classificacao, tempo_duracao)
        self.episodios = episodios
        self.temporadas = temporadas

    def exibir_informacoes(self):
        print("‚ïî" + "‚ïê" * 50 + "‚ïó")
        print(f"‚ïë üì∫  {self.titulo:<42}‚ïë")
        print("‚ï†" + "‚ïê" * 50 + "‚ï£")
        print(f"‚ïë Tipo: S√©rie{'':<42}‚ïë")
        print(f"‚ïë G√™nero: {self.genero:<40}‚ïë")
        print(f"‚ïë Classifica√ß√£o: {self.classificacao:<32}‚ïë")
        print(f"‚ïë Dura√ß√£o m√©dia de epis√≥dios: {self.tempo_duracao} min{'':<31}‚ïë")
        print(f"‚ïë Epis√≥dios: {self.episodios:<40}‚ïë")
        print(f"‚ïë Temporadas: {self.temporadas:<38}‚ïë")
        print(f"‚ïë Status: {self.configurar_visualizacao()} {'':<31}‚ïë")
        print("‚ïö" + "‚ïê" * 50 + "‚ïù")

class Documentario(Midia):
    def exibir_informacoes(self):
        print("‚ïî" + "‚ïê" * 50 + "‚ïó")
        print(f"‚ïë üìΩÔ∏è  {self.titulo:<42}‚ïë")
        print("‚ï†" + "‚ïê" * 50 + "‚ï£")
        print(f"‚ïë Tipo: Document√°rio{'':<42}‚ïë")
        print(f"‚ïë G√™nero: {self.genero:<40}‚ïë")
        print(f"‚ïë Classifica√ß√£o: {self.classificacao:<32}‚ïë")
        print(f"‚ïë Dura√ß√£o: {self.tempo_duracao} min{'':<31}‚ïë")
        print(f"‚ïë Status: {self.configurar_visualizacao()} {'':<31}‚ïë")
        print("‚ïö" + "‚ïê" * 50 + "‚ïù")

class Novela(Midia):
    def exibir_informacoes(self):
        print("‚ïî" + "‚ïê" * 50 + "‚ïó")
        print(f"‚ïë üåπ  {self.titulo:<42}‚ïë")
        print("‚ï†" + "‚ïê" * 50 + "‚ï£")
        print(f"‚ïë Tipo: Novela{'':<42}‚ïë")
        print(f"‚ïë G√™nero: {self.genero:<40}‚ïë")
        print(f"‚ïë Classifica√ß√£o: {self.classificacao:<32}‚ïë")
        print(f"‚ïë Dura√ß√£o: {self.tempo_duracao} min{'':<31}‚ïë")
        print(f"‚ïë Status: {self.configurar_visualizacao()} {'':<31}‚ïë")
        print("‚ïö" + "‚ïê" * 50 + "‚ïù")

class Anime(Midia):
    def __init__(self, titulo, genero, classificacao, tempo_duracao, episodios, temporadas):
        super().__init__(titulo, genero, classificacao, tempo_duracao)
        self.episodios = episodios
        self.temporadas = temporadas
    def exibir_informacoes(self):
        print("‚ïî" + "‚ïê" * 50 + "‚ïó")
        print(f"‚ïë üéå  {self.titulo:<42}‚ïë")
        print("‚ï†" + "‚ïê" * 50 + "‚ï£")
        print(f"‚ïë Tipo: Anime{'':<42}‚ïë")
        print(f"‚ïë G√™nero: {self.genero:<40}‚ïë")
        print(f"‚ïë Classifica√ß√£o: {self.classificacao:<32}‚ïë")
        print(f"‚ïë Dura√ß√£o m√©dia de epis√≥dios: {self.tempo_duracao} min{'':<31}‚ïë")
        print(f"‚ïë Epis√≥dios: {self.episodios:<40}‚ïë")
        print(f"‚ïë Temporadas: {self.temporadas:<38}‚ïë")
        print(f"‚ïë Status: {self.configurar_visualizacao()} {'':<31}‚ïë")
        print("‚ïö" + "‚ïê" * 50 + "‚ïù")

    
def todas_as_midias():
    midias = []

    # A√ß√£o
    midias.append(Filme("O Resgate", "A√ß√£o", "16+", 120))
    midias.append(Filme("At√© o √öltimo Homem", "A√ß√£o", "16+", 140))
    midias.append(Serie("The Last of Us", "A√ß√£o", "16+", 50, 9, 1))
    midias.append(Filme("Vingadores: Ultimato", "A√ß√£o", "12", 181))
    midias.append(Serie("The Walking Dead", "A√ß√£o", "16", 42, 177, 11))
    midias.append(Serie("Arcane", "A√ß√£o", "16", 24, 24, 1))
    midias.append(Filme("Mad Max: Estrada da F√∫ria", "A√ß√£o", "16", 120))
    midias.append(Filme("John Wick", "A√ß√£o", "16", 101))
    midias.append(Filme("John Wick 2", "A√ß√£o", "16", 122))
    midias.append(Filme("John Wick 3", "A√ß√£o", "16", 130))
    midias.append(Filme("Homem-Aranha: Sem Volta para Casa", "A√ß√£o", "12", 148))
    midias.append(Filme("Batman: O Cavaleiro das Trevas", "A√ß√£o", "12", 152))
    midias.append(Filme("O Resgate do Soldado Ryan", "A√ß√£o", "16", 169))
    midias.append(Filme("Stalingrado", "A√ß√£o", "16", 131))
    midias.append(Filme("1917", "A√ß√£o", "16", 119))
    midias.append(Filme("Invas√£o do mundo: Batalha de Los Angeles", "A√ß√£o", "12", 116))

    # Com√©dia
    midias.append(Filme("O auto da Compadecida", "Com√©dia", "12", 100))
    midias.append(Filme("Debi & Loide", "Com√©dia", "12", 107))
    midias.append(Filme("Shrek 5", "Com√©dia", "10", 120))
    midias.append(Serie("Brooklyn Nine-Nine", "Com√©dia", "12", 22, 153, 8))
    midias.append(Serie("Friends", "Com√©dia", "12", 22, 236, 10))
    midias.append(Serie("Os Simpsons", "Com√©dia", "10", 22, 700, 34))
    midias.append(Filme("Minecraft: O Filme", "Com√©dia", "10", 120))
    midias.append(Filme("Minha M√£e √© uma Pe√ßa", "Com√©dia", "12", 100))
    midias.append(Serie("The Office", "Com√©dia", "14", 22, 201, 9))
    midias.append(Filme("Click", "Com√©dia", "12", 107))

    # Drama
    midias.append(Serie("This Is Us", "Drama", "14", 43, 106, 6))
    midias.append(Filme("A Lista de Schindler", "Drama", "16", 195))
    midias.append(Filme("O Pianista", "Drama", "16", 150))
    midias.append(Serie("Forest Gump", "Drama", "12", 142, 1, 1))
    midias.append(Filme("Oppenheimer", "Drama", "14", 180))
    midias.append(Filme("Ainda Estou Aqui", "Drama", "12", 120))
    midias.append(Filme("A Rede Social", "Drama", "12", 120))
    midias.append(Filme("A Teoria de Tudo", "Drama", "12", 123))
    midias.append(Filme("O Lobo de Wall Street", "Drama", "16", 180))

    # Romance
    midias.append(Filme("A Culpa √© das Estrelas", "Romance", "12", 126))
    midias.append(Filme("Como Eu Era Antes de Voc√™", "Romance", "12", 110))
    midias.append(Filme("Atypical", "Romance", "12", 30))
    midias.append(Serie("Thundermans", "Romance", "10", 22, 52, 4))
    midias.append(Filme("Me Chame Pelo Seu Nome", "Romance", "16", 132))
    midias.append(Serie("Emily em Paris", "Romance", "12", 30, 30, 3))
    midias.append(Filme("Para Todos os Garotos que J√° Amei", "Romance", "12", 99))

    # Terror
    midias.append(Filme("O Telefone Preto", "Terror", "16", 115))
    midias.append(Filme("Sorria", "Terror", "16", 100))
    midias.append(Filme("O chamado", "Terror", "16", 120))
    midias.append(Filme("Jogos Mortais", "Terror", "18", 90))
    midias.append(Filme("Five Nights at Freddy's", "Terror", "16", 110))
    midias.append(Filme("Five Nights at Freddy's 2", "Terror", "16", 130))

    # Document√°rio
    midias.append(Documentario("Retratos Fantasmas", "Document√°rio", "10", 60))
    midias.append(Documentario("Explicando a mente", "Document√°rio", "10", 30))
    midias.append(Documentario("O Dilema das Redes", "Document√°rio", "12", 94))
    midias.append(Documentario("Nosso Planeta", "Document√°rio", "10", 50))
    midias.append(Documentario("O Come√ßo da Vida", "Document√°rio", "10", 90))
    midias.append(Documentario("Segunda Guerra Mundial em Cores", "Document√°rio", "10", 50))

    # Anima√ß√£o
    midias.append(Anime("Attack on Titan", "Anima√ß√£o", "16", 24, 75, 4))
    midias.append(Filme("Toy Story 4", "Anima√ß√£o", "10", 100))
    midias.append(Anime("Naruto Shippuden", "Anima√ß√£o", "12", 23, 220, 20))
    midias.append(Anime("One Piece", "Anima√ß√£o", "12", 24, 1000, 20))
    midias.append(Filme("Kung Fu Panda", "Anima√ß√£o", "10", 92))
    midias.append(Serie("Rick and Morty", "Anima√ß√£o", "16", 22, 61, 5))
    midias.append(Serie("Peixonauta", "Anima√ß√£o", "10", 11, 52, 2))
    midias.append(Anime("Dragon Ball Z", "Anima√ß√£o", "12", 24, 291, 9))
    midias.append(Filme("O Rei Le√£o", "Anima√ß√£o", "10", 88))
    midias.append(Filme("Frozen", "Anima√ß√£o", "10", 102))
    midias.append(Filme("Divertida Mente", "Anima√ß√£o", "10", 95))
    midias.append(Filme("Zootopia", "Anima√ß√£o", "10", 108))
    midias.append(Filme("Sonic: O Filme", "Anima√ß√£o", "10", 99))
    midias.append(Filme("Sonic 2: O Filme", "Anima√ß√£o", "10", 122))
    midias.append(Filme("Super Mario Bros: O Filme", "Anima√ß√£o", "10", 92))
    midias.append(Filme("Minions", "Anima√ß√£o", "10", 91))
    midias.append(Filme("Os Incr√≠veis", "Anima√ß√£o", "10", 115))
    midias.append(Filme("A Era do Gelo", "Anima√ß√£o", "10", 81))
    midias.append(Filme("A Era do Gelo 2", "Anima√ß√£o", "10", 94))
    midias.append(Filme("A Era do Gelo 3", "Anima√ß√£o", "10", 94))
    midias.append(Serie("A Turma da M√¥nica", "Anima√ß√£o", "10", 11, 52, 2))


    # Fantasia
    midias.append(Serie("Guerra dos Tronos", "A√ß√£o", "18", 60, 73, 8))
    midias.append(Filme("Harry Potter e a Pedra Filosofal", "Fantasia", "10", 152))
    midias.append(Filme("O Senhor dos An√©is: A Sociedade do Anel", "Fantasia", "12", 178))
    midias.append(Serie("A casa do Drag√£o", "Fantasia", "18", 60, 10, 1))
    midias.append(Serie("The Witcher", "Fantasia", "18", 60, 32, 2))
    midias.append(Filme("As Cr√¥nicas de N√°rnia", "Fantasia", "10", 143))
    midias.append(Filme("Peter Pan", "Fantasia", "10", 77))
    midias.append(Filme("Percy Jackson e o Ladr√£o de Raios", "Fantasia", "12", 118))

    # Aventura
    midias.append(Serie("Pok√©mon", "Aventura", "10", 22, 1200, 25))
    midias.append(Serie("Hora de Aventura", "Aventura", "10", 11, 283, 10))
    midias.append(Filme("Jurassic Park", "Aventura", "12", 127))
    midias.append(Serie("Steven Universe", "Aventura", "10", 11, 160, 5))
    midias.append(Serie("Apenas um Show", "Aventura", "10", 11, 261, 8))
    midias.append(Serie("O incr√≠vel mundo de Gumball", "Aventura", "10", 11, 240, 6))
    midias.append(Serie("Peppa Pig", "Aventura", "10", 5, 300, 7))
    midias.append(Filme("Como Treinar o Seu Drag√£o", "Aventura", "10", 98))
    midias.append(Serie("Ben 10", "Aventura", "10", 22, 70, 4))
    midias.append(Serie("Ben 10: For√ßa Alien√≠gena", "Aventura", "10", 22, 70, 4))
    midias.append(Serie("Ben 10: Supremacia Alien√≠gena", "Aventura", "10", 22, 70, 4))
    midias.append(Serie("Ben 10: Omniverse", "Aventura", "10", 22, 70, 4))
    midias.append(Serie("Minecraft: Story Mode", "Aventura", "10", 22, 8, 1))
    
    return midias

def obter_catalogo_do_perfil(perfil) -> ConjuntoMidias:
    if perfil.catalogo is None:
        cat = ConjuntoMidias()
        midias = todas_as_midias()  # cria as inst√¢ncias UMA vez para este perfil
        if getattr(perfil, "controle_parental", False):
            midias = [m for m in midias if int(str(m.classificacao).rstrip('+')) <= perfil.idade_limite]
        cat.midias.extend(midias)
        perfil.catalogo = cat
    return perfil.catalogo

# Fun√ß√£o principal para assistir o conte√∫do
def Explorar_Conteudo(usuario):
    print("Quem est√° assistindo?")
    continuar = usuario.listar_perfis()
    if not continuar:
        return
    nome_perfil = input("Digite o nome do perfil: ")
    perfil = usuario.obter_perfil_por_nome(nome_perfil) 
    if perfil is None:
        print(f"Perfil '{nome_perfil}' n√£o encontrado. Por favor, tente novamente.")
        return
    print(f"Bem-vindo(a), {perfil.nome_perfil}!\n")

    catalogo = obter_catalogo_do_perfil(perfil)
    
    # Filtro parental
    if perfil.controle_parental:
        catalogo.midias = [m for m in catalogo.midias if int(str(m.classificacao).rstrip('+')) <= perfil.idade_limite]
    
    while True:
        print("Biblioteca de Conte√∫do:")
        print("‚ïî" + "‚ïê" * 50 + "‚ïó")
        print("1. Buscar por T√≠tulo")
        print("2. Buscar por G√™nero")
        print("3. Navegar pela Biblioteca")
        print("4. Selecionar conte√∫do para assistir")
        print("5. Sair")
        print("‚ïö" + "‚ïê" * 50 + "‚ïù")
        escolha = input("Escolha uma op√ß√£o: ")

        if escolha == "1":
            limpar_tela()
            titulo = input("Digite o t√≠tulo do conte√∫do: ")
            resultados = catalogo.buscar_por_titulo(titulo)
            if resultados:
                print("\nResultados da busca por t√≠tulo:\n")
                for midia in resultados:
                    midia.exibir_informacoes()
            else:
                print("Nenhum conte√∫do encontrado.")

        elif escolha == "2":
            limpar_tela()
            genero = input("Digite o g√™nero do conte√∫do: ")
            resultados = catalogo.buscar_por_genero(genero)
            if resultados:
                print("\nResultados da busca por g√™nero:\n")
                for midia in resultados:
                    midia.exibir_informacoes()
            else:
                print("Nenhum conte√∫do encontrado.")

        elif escolha == "3":
            limpar_tela()
            catalogo.navegar()
        elif escolha == "4":
            titulo = input("Digite o t√≠tulo do conte√∫do que deseja assistir: ")
            resultados = catalogo.buscar_por_titulo(titulo)

            if not resultados:
                print("Conte√∫do n√£o encontrado.")
                time.sleep(2)
                limpar_tela()
                continue

            print("\nConte√∫dos encontrados:\n")
            for idx, midia in enumerate(resultados):
                print(f"[{idx + 1}]")
                midia.exibir_informacoes()
                print()

            escolha_conteudo = input("Digite o n√∫mero do conte√∫do que deseja assistir: ")

            if escolha_conteudo.isdigit():
                indice = int(escolha_conteudo) - 1
                if 0 <= indice < len(resultados):
                    conteudo_escolhido = resultados[indice]
                    usuario.otimizacao_banda_larga.auto_ajuste = True
                    conteudo_escolhido.assistir(usuario)
                    perfil.historico.adicionar_no_historico(conteudo_escolhido)
                    perfil.recomendacoes.adicionar_conteudo(conteudo_escolhido.genero)
                else:
                    print("Op√ß√£o inv√°lida.")
            else:
                print("Entrada inv√°lida.")


        elif escolha == "5":
            print("Saindo da biblioteca...")
            break

        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")

def Explorar_Conteudo_Convidado():
    print("Bem-vindo(a) ao modo convidado!")
    catalogo = ConjuntoMidias()
    
    for midia in todas_as_midias():
        catalogo.midias.append(midia)

    while True:
        print("Biblioteca de Conte√∫do:")
        print("‚ïî" + "‚ïê" * 50 + "‚ïó")
        print("1. Navegar pela Biblioteca")
        print("2. Selecionar conte√∫do para assistir")
        print("3. Sair")
        print("‚ïö" + "‚ïê" * 50 + "‚ïù")
        escolha = input("Escolha uma op√ß√£o: ")

        if escolha == "1":
            limpar_tela()
            # Limitar a navega√ß√£o para convidados: mostrar apenas 5 conte√∫dos aleat√≥rios
            catalogo.navegar(quantidade=5)

        elif escolha == "2":
            titulo = input("Digite o t√≠tulo do conte√∫do que deseja assistir: ")
            resultados = catalogo.buscar_por_titulo(titulo)

            # Limitar resultados para convidados: mostrar no m√°ximo 3 op√ß√µes
            if not resultados:
                print("Conte√∫do n√£o encontrado.")
                time.sleep(2)
                limpar_tela()
                continue

            resultados_limitados = resultados[:3]

            print("\nConte√∫dos encontrados (m√°x. 3):\n")
            for idx, midia in enumerate(resultados_limitados):
                print(f"[{idx + 1}]")
                print()

            escolha_conteudo = input("Digite o n√∫mero do conte√∫do que deseja assistir: ")

            if escolha_conteudo.isdigit():
                indice = int(escolha_conteudo) - 1
                if 0 <= indice < len(resultados_limitados):
                    conteudo_escolhido = resultados_limitados[indice]
                    conteudo_escolhido.assistir_convidado()
                else:
                    print("Op√ß√£o inv√°lida.")
            else:
                print("Entrada inv√°lida.")

        elif escolha == "3":
            print("Saindo da biblioteca...")
            break

        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")